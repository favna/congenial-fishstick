plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version "1.1.2"
    id 'org.owasp.dependencycheck' version '8.3.1'
    id 'org.springframework.cloud.contract' version '4.0.3'
}

group = 'com.example'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked', '-Xlint:deprecation']
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations.configureEach {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-json'
    exclude group: 'com.sun.xml.bind'
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    springBootVersion = '3.1.1'
    springCloudVersion = '2022.0.3'
    springCloudContractVersion = '4.0.3'
    springCloudStarterVersion = '4.0.3'
    pivotalSpringCloudServicesVersion = '4.0.3'
    springdocVersion = '1.7.0'
    restAssuredVersion = '5.3.1'
    rdf4jVersion = '3.7.7'
    lombokVersion = '1.18.28'
    guavaVersion = '32.1.1-jre'
    velocityEngineCoreVersion = '2.3'
    postgresqlR2dbcVersion = '1.0.2.RELEASE'
    postgresqlPostgresqlVersion = '42.6.0'
    springSecurityTestVersion = '6.1.1'
    reactorTestVersion = '3.5.8'
    liquibaseCoreVersion = '4.23.0'
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-r2dbc:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}")

    implementation("io.pivotal.spring.cloud:spring-cloud-services-starter-config-client:${pivotalSpringCloudServicesVersion}")
    implementation("org.springframework.cloud:spring-cloud-starter-bootstrap:${springCloudStarterVersion}")

    implementation("org.springdoc:springdoc-openapi-webflux-ui:${springdocVersion}")
    implementation("com.google.guava:guava:${guavaVersion}")
    implementation("org.apache.velocity:velocity-engine-core:${velocityEngineCoreVersion}")

    implementation("org.postgresql:r2dbc-postgresql:${postgresqlR2dbcVersion}")
    implementation("org.postgresql:postgresql:${postgresqlPostgresqlVersion}")
    implementation("org.eclipse.rdf4j:rdf4j-model:${rdf4jVersion}")

    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testImplementation("org.springframework.security:spring-security-test:${springSecurityTestVersion}")

    testImplementation("org.springframework.cloud:spring-cloud-starter-contract-verifier:${springCloudContractVersion}")
    testImplementation("org.springframework.cloud:spring-cloud-starter-contract-stub-runner:${springCloudContractVersion}")
    testImplementation("io.rest-assured:spring-web-test-client:${restAssuredVersion}")
    testImplementation("io.rest-assured:rest-assured-common:${restAssuredVersion}")
    testImplementation("io.projectreactor:reactor-test:${reactorTestVersion}")

    testRuntimeOnly("org.liquibase:liquibase-core:${liquibaseCoreVersion}")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:${springCloudContractVersion}"
        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${pivotalSpringCloudServicesVersion}"
    }
}

test {
    useJUnitPlatform()
}

contracts {
    testFramework = org.springframework.cloud.contract.verifier.config.TestFramework.JUNIT5
    testMode = 'WEBTESTCLIENT'
    failOnNoContracts = false
}

dependencyCheck {
    format = 'CSV'
    skip = true
    failBuildOnCVSS = 11
    suppressionFile = 'owasp-suppressions.xml'
}
